<h1 id="Flatsy-API">Flatsy API v1.0</h1>

> Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.

Base URLs:

* <a href="//pacific.flatsy.fr/">//pacific.flatsy.fr/</a>

License: <a href="http://licenseUrl"></a>

# Authentication

* API Key (api_key)
    - Parameter Name: **X-Auth-Token**, in: header.

<h1 id="Flatsy-API-business">business</h1>

## ownerProperties

<a id="opIdownerProperties"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/properties \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/properties HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/properties',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/properties',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/properties',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/properties', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/properties");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/properties", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/properties`

*all properties for a user*

> Example responses

> 200 Response

<h3 id="ownerproperties-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|Inline|

<h3 id="ownerproperties-responseschema">Response Schema</h3>

Status Code **200**

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|*anonymous*|[[Property](#schemaproperty)]|false|none|none|
|» id|string(uuid)|true|none|none|
|» userId|string(uuid)|true|none|none|
|» data|[PropertyData](#schemapropertydata)|true|none|none|
|»» rentSell|string|false|none|Property rent type|
|»» criterias|[Criterias](#schemacriterias)|false|none|none|
|»»» pinel|boolean|false|none|none|
|»»» sharingAllowed|boolean|false|none|none|
|»»» gli|boolean|false|none|none|
|»»» actionLogement|boolean|false|none|none|
|»» price|number(double)|false|none|Property rent type|
|»» propertyStatus|string|false|none|Property status|
|»» propertyStatusUpdatedAt|string(date-time)|false|none|none|
|»» extUrl|string|false|none|none|
|»» address|[Address](#schemaaddress)|false|none|none|
|»»» address|string|true|none|none|
|»»» zip|string|true|none|none|
|»»» city|string|true|none|none|
|»»» countryCode|string|true|none|none|
|»»» latitude|number|true|none|none|
|»»» longitude|number|true|none|none|
|»»» doorInfo|string|false|none|none|
|»» doorRef|string|false|none|none|
|»» memo|string|false|none|none|
|»» picHandles|[string]|false|none|none|
|»» picUrls|[string]|false|none|none|
|»» fields|[PropertyFields](#schemapropertyfields)|false|none|none|
|»»» surface|number|false|none|none|
|»»» additionalSurfaces|[[Surface](#schemasurface)]|false|none|additionalSurfaces|
|»»»» name|string|true|none|none|
|»»»» surface|number|true|none|none|
|»»» numRooms|integer(int32)|false|none|numRooms|
|»»» numBedrooms|integer(int32)|false|none|numBedrooms|
|»»» orientation|string|false|none|none|
|»»» text|string|false|none|none|
|»»» deposit|number|false|none|none|
|»»» monthlyCharges|number|false|none|none|
|»»» agencyFee|number|false|none|none|
|»»» availableFrom|string|false|none|none|
|»»» floor|integer(int32)|false|none|floor number|
|»»» heating|string|false|none|none|
|»»» cave|boolean|false|none|cave|
|»»» keeper|boolean|false|none|keeper|
|»»» parking|boolean|false|none|parking|
|»»» furnished|boolean|false|none|furnished|
|»»» leaseDurationYears|integer(int32)|false|none|leaseDurationYears|
|»»» works|string|false|none|none|
|»»» dpe|string|false|none|none|
|»»» constructionYear|integer(int32)|false|none|constructionYear|
|»» visitAvailabilities|[[FlatsyInterval](#schemaflatsyinterval)]|false|none|availabilities|
|»»» start|string(date-time)|true|none|none|
|»»» end|string(date-time)|true|none|none|
|»» externalRef|string|false|none|none|
|»» additionalRefs|[string]|false|none|none|
|»» pickedVisitorId|string|false|none|none|
|»» tenantPhone|string|false|none|none|
|»» extraFields|object|false|none|extraFields|
|» createdAt|string(date-time)|false|none|none|
|» updatedAt|string(date-time)|false|none|none|
|» ownerContact|[Contact](#schemacontact)|true|none|none|
|»» name|string|true|none|none|
|»» phone|string|false|none|none|
|»» email|string|false|none|none|
|»» pictureUrl|string|false|none|none|
|»» displayAddress|string|false|none|none|
|»» phone2|string|false|none|none|
|»» businessHours|string|false|none|none|
|» lastViewingAt|string(date-time)|false|none|none|
|» inCharge|string|false|none|none|
|» viewingsPlanned|number|false|none|none|
|» viewingsDone|number|false|none|none|

#### Enumerated Values

|Property|Value|
|---|---|
|rentSell|property.basics.rentsell.rent|
|rentSell|property.basics.rentsell.sell|
|propertyStatus|property.basics.status.available|
|propertyStatus|property.basics.status.unavailable|
|propertyStatus|property.basics.status.standby|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## sendViewingMail

<a id="opIdsendViewingMail"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/sendmail/{ref} \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/sendmail/{ref} HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/sendmail/{ref}',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "email": "string",
  "firstName": "string",
  "lastName": "string",
  "phone": "string",
  "fields": {}
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/sendmail/{ref}',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/sendmail/{ref}',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/sendmail/{ref}', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/sendmail/{ref}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/sendmail/{ref}", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/sendmail/{ref}`

*send a viewing request email to an email*

> Body parameter

```json
{
  "email": "string",
  "firstName": "string",
  "lastName": "string",
  "phone": "string",
  "fields": {}
}
```

<h3 id="sendviewingmail-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|ref|path|string|true|property reference|
|body|body|[Visitor](#schemavisitor)|true|visitor info|

> Example responses

> 200 Response

<h3 id="sendviewingmail-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|string|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## ownerPropertyByRef

<a id="opIdownerPropertyByRef"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/property \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/property HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/property',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/property',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/property',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/property', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/property");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/property", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/property`

*property for a user by external reference*

<h3 id="ownerpropertybyref-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|ref|query|string|false|none|

> Example responses

> 200 Response

<h3 id="ownerpropertybyref-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Property](#schemaproperty)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## updatePropertyAvailability

<a id="opIdupdatePropertyAvailability"></a>

> Code samples

```shell
# You can also use wget
curl -X PUT /pacific.flatsy.fr/api/v1/business/property/availability?ref=18%2F1280%2F02%2F0227 \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
PUT /pacific.flatsy.fr/api/v1/business/property/availability?ref=18%2F1280%2F02%2F0227 HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/property/availability',
  method: 'put',
  data: '?ref=18%2F1280%2F02%2F0227',
  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "availability": [
    {
      "start": "2018-07-09T12:27:04Z",
      "end": "2018-07-09T12:27:04Z"
    }
  ]
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/property/availability?ref=18%2F1280%2F02%2F0227',
{
  method: 'PUT',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.put '/pacific.flatsy.fr/api/v1/business/property/availability',
  params: {
  'ref' => 'string'
}, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.put('/pacific.flatsy.fr/api/v1/business/property/availability', params={
  'ref': '18/1280/02/0227'
}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/property/availability?ref=18%2F1280%2F02%2F0227");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("PUT");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("PUT", "/pacific.flatsy.fr/api/v1/business/property/availability", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`PUT /api/v1/business/property/availability`

*update property availability*

> Body parameter

```json
{
  "availability": [
    {
      "start": "2018-07-09T12:27:04Z",
      "end": "2018-07-09T12:27:04Z"
    }
  ]
}
```

<h3 id="updatepropertyavailability-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|ref|query|string|true|property reference|
|body|body|[AvailabilityUpdateRequest](#schemaavailabilityupdaterequest)|true|availability update request|

> Example responses

> 200 Response

<h3 id="updatepropertyavailability-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Property](#schemaproperty)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## updatePropertyStatus

<a id="opIdupdatePropertyStatus"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/property/{ref}/status \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/property/{ref}/status HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/property/{ref}/status',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "propertyStatus": "available"
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/property/{ref}/status',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/property/{ref}/status',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/property/{ref}/status', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/property/{ref}/status");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/property/{ref}/status", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/property/{ref}/status`

*update property status*

> Body parameter

```json
{
  "propertyStatus": "available"
}
```

<h3 id="updatepropertystatus-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|ref|path|string|true|property reference|
|body|body|[PropertyStatusChangeRequest](#schemapropertystatuschangerequest)|true|status change request|

> Example responses

> 200 Response

<h3 id="updatepropertystatus-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Property](#schemaproperty)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## terminateProperty

<a id="opIdterminateProperty"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/property/{ref}/terminate \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/property/{ref}/terminate HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/property/{ref}/terminate',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "pickedVisitorEmail": "string"
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/property/{ref}/terminate',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/property/{ref}/terminate',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/property/{ref}/terminate', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/property/{ref}/terminate");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/property/{ref}/terminate", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/property/{ref}/terminate`

*end viewings for a property*

> Body parameter

```json
{
  "pickedVisitorEmail": "string"
}
```

<h3 id="terminateproperty-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|ref|path|string|true|property reference|
|body|body|[PropertyTerminateRequest](#schemapropertyterminaterequest)|true|terminate viewings request|

> Example responses

> 200 Response

<h3 id="terminateproperty-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Property](#schemaproperty)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

<h1 id="Flatsy-API-businessuser">businessuser</h1>

## self

<a id="opIdself"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/me \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/me HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/me',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/me',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/me',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/me', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/me");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/me", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/me`

*get user data*

> Example responses

> 200 Response

<h3 id="self-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Client](#schemaclient)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## userCredsLogin

<a id="opIduserCredsLogin"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/login \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/login HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/login',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "identifier": "string",
  "password": "string"
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/login',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/login',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/login', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/login");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/login", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/login`

*login with credentials*

> Body parameter

```json
{
  "identifier": "string",
  "password": "string"
}
```

<h3 id="usercredslogin-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|body|body|[Credentials](#schemacredentials)|true|credentials|

> Example responses

> 200 Response

<h3 id="usercredslogin-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[LoginResponse](#schemaloginresponse)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

<h1 id="Flatsy-API-businessvisit">businessvisit</h1>

## visit

<a id="opIdvisit"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/visit/{id} \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/visit/{id} HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visit/{id}',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visit/{id}',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/visit/{id}',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/visit/{id}', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visit/{id}");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/visit/{id}", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/visit/{id}`

*get a visit with*

<h3 id="visit-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|id|path|string(uuid)|true|none|

> Example responses

> 200 Response

<h3 id="visit-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Visit](#schemavisit)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## updateVisitor

<a id="opIdupdateVisitor"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/update/visitor \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/update/visitor HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/update/visitor',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "email": "string",
  "firstName": "string",
  "lastName": "string",
  "phone": "string",
  "fields": {}
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/update/visitor',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/update/visitor',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/update/visitor', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/update/visitor");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/update/visitor", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/update/visitor`

*update a visitor*

> Body parameter

```json
{
  "email": "string",
  "firstName": "string",
  "lastName": "string",
  "phone": "string",
  "fields": {}
}
```

<h3 id="updatevisitor-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|visitId|query|string(uuid)|false|none|
|visitorId|query|string|false|none|
|body|body|[Visitor](#schemavisitor)|true|update visitor|

> Example responses

> 200 Response

<h3 id="updatevisitor-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Visitor](#schemavisitor)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## visits

<a id="opIdvisits"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/visits \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/visits HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visits',
  method: 'get',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visits',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/visits',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/visits', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visits");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/visits", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/visits`

*All visits for a client*

<h3 id="visits-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|startTime|query|string|false|startTime|
|endTime|query|string|false|endTime|
|direction|query|string|false|direction|
|page|query|integer(int32)|false|page|
|by|query|integer(int32)|false|by|
|ref|query|string|false|ref|

> Example responses

> 200 Response

<h3 id="visits-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|Inline|

<h3 id="visits-responseschema">Response Schema</h3>

Status Code **200**

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|*anonymous*|[[Visit](#schemavisit)]|false|none|none|
|» id|string(uuid)|true|none|none|
|» date|string(date-time)|false|none|none|
|» createdAt|string(date-time)|false|none|none|
|» flatguideId|string(uuid)|false|none|none|
|» code|string|false|none|none|
|» propertyVisits|[[PropertyVisit](#schemapropertyvisit)]|true|none|none|
|»» propertyId|string(uuid)|true|none|none|
|»» visitId|string(uuid)|true|none|none|
|»» readAt|string(date-time)|false|none|none|
|»» note|string|false|none|none|
|»» comment|string|false|none|none|
|»» positivePoints|string|false|none|none|
|»» negativePoints|string|false|none|none|
|»» questions|string|false|none|none|
|»» visitorInterest|integer(int32)|false|none|visitorInterest|
|» visitorVisits|[[VisitorVisit](#schemavisitorvisit)]|true|none|none|
|»» visitId|string(uuid)|true|none|none|
|»» askedPropertyId|string(uuid)|true|none|none|
|»» status|string|false|none|Visit status|
|»» initialDate|string(date-time)|false|none|none|
|»» rating|integer(int32)|false|none|rating|
|»» comment|string|false|none|none|
|»» visitor|[Visitor](#schemavisitor)|true|none|none|
|»»» email|string|true|none|none|
|»»» firstName|string|true|none|none|
|»»» lastName|string|true|none|none|
|»»» phone|string|true|none|none|
|»»» fields|object|false|none|custom fields|
|»» fileUrl|string|false|none|none|
|»» fileHandles|[string]|false|none|none|
|»» statusUpdatedAt|string(date-time)|false|none|none|
|» propertySummary|[PropertySummary](#schemapropertysummary)|true|none|none|
|»» id|string(uuid)|false|none|none|
|»» displayAddress|string|true|none|none|
|»» pictureUrl|string|false|none|none|
|»» ownerPictureUrl|string|false|none|none|
|»» latitude|number(double)|true|none|none|
|»» longitude|number(double)|true|none|none|
|»» externalRef|string|false|none|none|
|»» doorNumber|string|false|none|none|
|»» rentSell|string|false|none|Property rent or sell|
|» durationMinutes|integer(int32)|true|none|none|

#### Enumerated Values

|Property|Value|
|---|---|
|status|visit.status.proposed|
|status|visit.status.confirmed|
|status|visit.status.cancelled.visitor|
|status|visit.status.cancelled.owner|
|status|visit.status.cancelled.flatguide|
|status|visit.status.cancelled.rescheduled|
|status|visit.status.cancelled.terminated|
|status|visit.status.done|
|rentSell|property.basics.rentsell.rent|
|rentSell|property.basics.rentsell.sell|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## visitorCancel

<a id="opIdvisitorCancel"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/visit/cancel \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/visit/cancel HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visit/cancel',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "visitStatus": "visit.status.proposed",
  "visitorId": "string",
  "visitId": "string"
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visit/cancel',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/visit/cancel',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/visit/cancel', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visit/cancel");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/visit/cancel", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/visit/cancel`

*cancel a viewing for a visitor*

> Body parameter

```json
{
  "visitStatus": "visit.status.proposed",
  "visitorId": "string",
  "visitId": "string"
}
```

<h3 id="visitorcancel-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|body|body|[VisitorCancelRequest](#schemavisitorcancelrequest)|true|visitor update status|

> Example responses

> 200 Response

<h3 id="visitorcancel-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Visitor](#schemavisitor)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## visitorStatusUpdate

<a id="opIdvisitorStatusUpdate"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/visitor/status \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/visitor/status HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visitor/status',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "visitStatus": "visit.status.proposed",
  "visitorId": "string",
  "visitId": "string"
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visitor/status',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/visitor/status',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/visitor/status', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visitor/status");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/visitor/status", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/visitor/status`

*change status for a visitor*

> Body parameter

```json
{
  "visitStatus": "visit.status.proposed",
  "visitorId": "string",
  "visitId": "string"
}
```

<h3 id="visitorstatusupdate-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|body|body|[StatusChangeRequest](#schemastatuschangerequest)|true|visitor update status|

> Example responses

> 200 Response

<h3 id="visitorstatusupdate-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Visitor](#schemavisitor)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## slots

<a id="opIdslots"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/visit/slots?propertyId=string \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/visit/slots?propertyId=string HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visit/slots',
  method: 'get',
  data: '?propertyId=string',
  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visit/slots?propertyId=string',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/visit/slots',
  params: {
  'propertyId' => 'string(uuid)'
}, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/visit/slots', params={
  'propertyId': 'string'
}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visit/slots?propertyId=string");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/visit/slots", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/visit/slots`

*visits availability for a given property*

<h3 id="slots-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|propertyId|query|string(uuid)|true|property id|
|isReschedule|query|boolean|false|isReschedule|

> Example responses

> 200 Response

<h3 id="slots-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|Inline|

<h3 id="slots-responseschema">Response Schema</h3>

Status Code **200**

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|*anonymous*|[[ViewingSlot](#schemaviewingslot)]|false|none|none|
|» date|string(date-time)|false|none|none|
|» available|boolean|true|none|none|
|» isPriority|boolean|true|none|none|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## visitCreate

<a id="opIdvisitCreate"></a>

> Code samples

```shell
# You can also use wget
curl -X POST /pacific.flatsy.fr/api/v1/business/visit/create \
  -H 'Content-Type: application/json' \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
POST /pacific.flatsy.fr/api/v1/business/visit/create HTTP/1.1

Content-Type: application/json
Accept: */*

```

```javascript
var headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visit/create',
  method: 'post',

  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');
const inputBody = '{
  "propertyId": "string",
  "date": "2018-07-09T12:27:04Z",
  "visitor": {
    "email": "string",
    "firstName": "string",
    "lastName": "string",
    "phone": "string",
    "fields": {}
  },
  "visitorTokenId": "string"
}';
const headers = {
  'Content-Type':'application/json',
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visit/create',
{
  method: 'POST',
  body: inputBody,
  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Content-Type' => 'application/json',
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.post '/pacific.flatsy.fr/api/v1/business/visit/create',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Content-Type': 'application/json',
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.post('/pacific.flatsy.fr/api/v1/business/visit/create', params={

}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visit/create");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("POST");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Content-Type": []string{"application/json"},
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("POST", "/pacific.flatsy.fr/api/v1/business/visit/create", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`POST /api/v1/business/visit/create`

*create a new visit*

> Body parameter

```json
{
  "propertyId": "string",
  "date": "2018-07-09T12:27:04Z",
  "visitor": {
    "email": "string",
    "firstName": "string",
    "lastName": "string",
    "phone": "string",
    "fields": {}
  },
  "visitorTokenId": "string"
}
```

<h3 id="visitcreate-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|body|body|[VisitCreateRequest](#schemavisitcreaterequest)|true|visit creation data|

> Example responses

> 200 Response

<h3 id="visitcreate-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|[Visit](#schemavisit)|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

## available

<a id="opIdavailable"></a>

> Code samples

```shell
# You can also use wget
curl -X GET /pacific.flatsy.fr/api/v1/business/visit/available?propertyId=string \
  -H 'Accept: */*' \
  -H 'X-Auth-Token: API_KEY'

```

```http
GET /pacific.flatsy.fr/api/v1/business/visit/available?propertyId=string HTTP/1.1

Accept: */*

```

```javascript
var headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

$.ajax({
  url: '/pacific.flatsy.fr/api/v1/business/visit/available',
  method: 'get',
  data: '?propertyId=string',
  headers: headers,
  success: function(data) {
    console.log(JSON.stringify(data));
  }
})

```

```javascript--nodejs
const request = require('node-fetch');

const headers = {
  'Accept':'*/*',
  'X-Auth-Token':'API_KEY'

};

fetch('/pacific.flatsy.fr/api/v1/business/visit/available?propertyId=string',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*',
  'X-Auth-Token' => 'API_KEY'
}

result = RestClient.get '/pacific.flatsy.fr/api/v1/business/visit/available',
  params: {
  'propertyId' => 'string(uuid)'
}, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*',
  'X-Auth-Token': 'API_KEY'
}

r = requests.get('/pacific.flatsy.fr/api/v1/business/visit/available', params={
  'propertyId': 'string'
}, headers = headers)

print r.json()

```

```java
URL obj = new URL("/pacific.flatsy.fr/api/v1/business/visit/available?propertyId=string");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
        "X-Auth-Token": []string{"API_KEY"},

    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "/pacific.flatsy.fr/api/v1/business/visit/available", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /api/v1/business/visit/available`

*visits availability for a given property*

<h3 id="available-parameters">Parameters</h3>

|Parameter|In|Type|Required|Description|
|---|---|---|---|---|
|propertyId|query|string(uuid)|true|property id|
|isReschedule|query|boolean|false|isReschedule|

> Example responses

> 200 Response

<h3 id="available-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|successful operation|Inline|

<h3 id="available-responseschema">Response Schema</h3>

Status Code **200**

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|*anonymous*|[[VisitSlot](#schemavisitslot)]|false|none|none|
|» date|string(date-time)|false|none|none|
|» available|boolean|true|none|none|
|» score|number|true|none|none|

<aside class="warning">
To perform this operation, you must be authenticated by means of one of the following methods:
api_key
</aside>

# Schemas

<h2 id="tocSaddress">Address</h2>

<a id="schemaaddress"></a>

```json
{
  "address": "string",
  "zip": "string",
  "city": "string",
  "countryCode": "string",
  "latitude": 0,
  "longitude": 0,
  "doorInfo": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|address|string|true|none|none|
|zip|string|true|none|none|
|city|string|true|none|none|
|countryCode|string|true|none|none|
|latitude|number|true|none|none|
|longitude|number|true|none|none|
|doorInfo|string|false|none|none|

<h2 id="tocScontact">Contact</h2>

<a id="schemacontact"></a>

```json
{
  "name": "string",
  "phone": "string",
  "email": "string",
  "pictureUrl": "string",
  "displayAddress": "string",
  "phone2": "string",
  "businessHours": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|name|string|true|none|none|
|phone|string|false|none|none|
|email|string|false|none|none|
|pictureUrl|string|false|none|none|
|displayAddress|string|false|none|none|
|phone2|string|false|none|none|
|businessHours|string|false|none|none|

<h2 id="tocScriterias">Criterias</h2>

<a id="schemacriterias"></a>

```json
{
  "pinel": true,
  "sharingAllowed": true,
  "gli": true,
  "actionLogement": true
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|pinel|boolean|false|none|none|
|sharingAllowed|boolean|false|none|none|
|gli|boolean|false|none|none|
|actionLogement|boolean|false|none|none|

<h2 id="tocSflatsyinterval">FlatsyInterval</h2>

<a id="schemaflatsyinterval"></a>

```json
{
  "start": "2018-07-09T12:27:04Z",
  "end": "2018-07-09T12:27:04Z"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|start|string(date-time)|true|none|none|
|end|string(date-time)|true|none|none|

<h2 id="tocSproperty">Property</h2>

<a id="schemaproperty"></a>

```json
{
  "id": "string",
  "userId": "string",
  "data": {
    "rentSell": "property.basics.rentsell.rent",
    "criterias": {
      "pinel": true,
      "sharingAllowed": true,
      "gli": true,
      "actionLogement": true
    },
    "price": 0,
    "propertyStatus": "property.basics.status.available",
    "propertyStatusUpdatedAt": "2018-07-09T12:27:04Z",
    "extUrl": "string",
    "address": {
      "address": "string",
      "zip": "string",
      "city": "string",
      "countryCode": "string",
      "latitude": 0,
      "longitude": 0,
      "doorInfo": "string"
    },
    "doorRef": "string",
    "memo": "string",
    "picHandles": [
      "string"
    ],
    "picUrls": [
      "string"
    ],
    "fields": {
      "surface": 0,
      "additionalSurfaces": [
        {
          "name": "string",
          "surface": 0
        }
      ],
      "numRooms": 0,
      "numBedrooms": 0,
      "orientation": "string",
      "text": "string",
      "deposit": 0,
      "monthlyCharges": 0,
      "agencyFee": 0,
      "availableFrom": "string",
      "floor": 0,
      "heating": "string",
      "cave": true,
      "keeper": true,
      "parking": true,
      "furnished": true,
      "leaseDurationYears": 0,
      "works": "string",
      "dpe": "string",
      "constructionYear": 0
    },
    "visitAvailabilities": [
      {
        "start": "2018-07-09T12:27:04Z",
        "end": "2018-07-09T12:27:04Z"
      }
    ],
    "externalRef": "string",
    "additionalRefs": [
      "string"
    ],
    "pickedVisitorId": "string",
    "tenantPhone": "string",
    "extraFields": {}
  },
  "createdAt": "2018-07-09T12:27:04Z",
  "updatedAt": "2018-07-09T12:27:04Z",
  "ownerContact": {
    "name": "string",
    "phone": "string",
    "email": "string",
    "pictureUrl": "string",
    "displayAddress": "string",
    "phone2": "string",
    "businessHours": "string"
  },
  "lastViewingAt": "2018-07-09T12:27:04Z",
  "inCharge": "string",
  "viewingsPlanned": 0,
  "viewingsDone": 0
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|id|string(uuid)|true|none|none|
|userId|string(uuid)|true|none|none|
|data|[PropertyData](#schemapropertydata)|true|none|none|
|createdAt|string(date-time)|false|none|none|
|updatedAt|string(date-time)|false|none|none|
|ownerContact|[Contact](#schemacontact)|true|none|none|
|lastViewingAt|string(date-time)|false|none|none|
|inCharge|string|false|none|none|
|viewingsPlanned|number|false|none|none|
|viewingsDone|number|false|none|none|

<h2 id="tocSpropertydata">PropertyData</h2>

<a id="schemapropertydata"></a>

```json
{
  "rentSell": "property.basics.rentsell.rent",
  "criterias": {
    "pinel": true,
    "sharingAllowed": true,
    "gli": true,
    "actionLogement": true
  },
  "price": 0,
  "propertyStatus": "property.basics.status.available",
  "propertyStatusUpdatedAt": "2018-07-09T12:27:04Z",
  "extUrl": "string",
  "address": {
    "address": "string",
    "zip": "string",
    "city": "string",
    "countryCode": "string",
    "latitude": 0,
    "longitude": 0,
    "doorInfo": "string"
  },
  "doorRef": "string",
  "memo": "string",
  "picHandles": [
    "string"
  ],
  "picUrls": [
    "string"
  ],
  "fields": {
    "surface": 0,
    "additionalSurfaces": [
      {
        "name": "string",
        "surface": 0
      }
    ],
    "numRooms": 0,
    "numBedrooms": 0,
    "orientation": "string",
    "text": "string",
    "deposit": 0,
    "monthlyCharges": 0,
    "agencyFee": 0,
    "availableFrom": "string",
    "floor": 0,
    "heating": "string",
    "cave": true,
    "keeper": true,
    "parking": true,
    "furnished": true,
    "leaseDurationYears": 0,
    "works": "string",
    "dpe": "string",
    "constructionYear": 0
  },
  "visitAvailabilities": [
    {
      "start": "2018-07-09T12:27:04Z",
      "end": "2018-07-09T12:27:04Z"
    }
  ],
  "externalRef": "string",
  "additionalRefs": [
    "string"
  ],
  "pickedVisitorId": "string",
  "tenantPhone": "string",
  "extraFields": {}
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|rentSell|string|false|none|Property rent type|
|criterias|[Criterias](#schemacriterias)|false|none|none|
|price|number(double)|false|none|Property rent type|
|propertyStatus|string|false|none|Property status|
|propertyStatusUpdatedAt|string(date-time)|false|none|none|
|extUrl|string|false|none|none|
|address|[Address](#schemaaddress)|false|none|none|
|doorRef|string|false|none|none|
|memo|string|false|none|none|
|picHandles|[string]|false|none|none|
|picUrls|[string]|false|none|none|
|fields|[PropertyFields](#schemapropertyfields)|false|none|none|
|visitAvailabilities|[[FlatsyInterval](#schemaflatsyinterval)]|false|none|availabilities|
|externalRef|string|false|none|none|
|additionalRefs|[string]|false|none|none|
|pickedVisitorId|string|false|none|none|
|tenantPhone|string|false|none|none|
|extraFields|object|false|none|extraFields|

#### Enumerated Values

|Property|Value|
|---|---|
|rentSell|property.basics.rentsell.rent|
|rentSell|property.basics.rentsell.sell|
|propertyStatus|property.basics.status.available|
|propertyStatus|property.basics.status.unavailable|
|propertyStatus|property.basics.status.standby|

<h2 id="tocSpropertyfields">PropertyFields</h2>

<a id="schemapropertyfields"></a>

```json
{
  "surface": 0,
  "additionalSurfaces": [
    {
      "name": "string",
      "surface": 0
    }
  ],
  "numRooms": 0,
  "numBedrooms": 0,
  "orientation": "string",
  "text": "string",
  "deposit": 0,
  "monthlyCharges": 0,
  "agencyFee": 0,
  "availableFrom": "string",
  "floor": 0,
  "heating": "string",
  "cave": true,
  "keeper": true,
  "parking": true,
  "furnished": true,
  "leaseDurationYears": 0,
  "works": "string",
  "dpe": "string",
  "constructionYear": 0
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|surface|number|false|none|none|
|additionalSurfaces|[[Surface](#schemasurface)]|false|none|additionalSurfaces|
|numRooms|integer(int32)|false|none|numRooms|
|numBedrooms|integer(int32)|false|none|numBedrooms|
|orientation|string|false|none|none|
|text|string|false|none|none|
|deposit|number|false|none|none|
|monthlyCharges|number|false|none|none|
|agencyFee|number|false|none|none|
|availableFrom|string|false|none|none|
|floor|integer(int32)|false|none|floor number|
|heating|string|false|none|none|
|cave|boolean|false|none|cave|
|keeper|boolean|false|none|keeper|
|parking|boolean|false|none|parking|
|furnished|boolean|false|none|furnished|
|leaseDurationYears|integer(int32)|false|none|leaseDurationYears|
|works|string|false|none|none|
|dpe|string|false|none|none|
|constructionYear|integer(int32)|false|none|constructionYear|

<h2 id="tocSsurface">Surface</h2>

<a id="schemasurface"></a>

```json
{
  "name": "string",
  "surface": 0
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|name|string|true|none|none|
|surface|number|true|none|none|

<h2 id="tocSvisitor">Visitor</h2>

<a id="schemavisitor"></a>

```json
{
  "email": "string",
  "firstName": "string",
  "lastName": "string",
  "phone": "string",
  "fields": {}
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|email|string|true|none|none|
|firstName|string|true|none|none|
|lastName|string|true|none|none|
|phone|string|true|none|none|
|fields|object|false|none|custom fields|

<h2 id="tocSavailabilityupdaterequest">AvailabilityUpdateRequest</h2>

<a id="schemaavailabilityupdaterequest"></a>

```json
{
  "availability": [
    {
      "start": "2018-07-09T12:27:04Z",
      "end": "2018-07-09T12:27:04Z"
    }
  ]
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|availability|[[FlatsyInterval](#schemaflatsyinterval)]|false|none|availabilities|

<h2 id="tocSpropertystatuschangerequest">PropertyStatusChangeRequest</h2>

<a id="schemapropertystatuschangerequest"></a>

```json
{
  "propertyStatus": "available"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|propertyStatus|string|false|none|Property status|

#### Enumerated Values

|Property|Value|
|---|---|
|propertyStatus|available|
|propertyStatus|standby|

<h2 id="tocSpropertyterminaterequest">PropertyTerminateRequest</h2>

<a id="schemapropertyterminaterequest"></a>

```json
{
  "pickedVisitorEmail": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|pickedVisitorEmail|string|false|none|none|

<h2 id="tocSclient">Client</h2>

<a id="schemaclient"></a>

```json
{
  "id": "string",
  "firstName": "string",
  "lastName": "string",
  "fullName": "string",
  "shortName": "string",
  "email": "string",
  "phone": "string",
  "address": {
    "address": "string",
    "zip": "string",
    "city": "string",
    "countryCode": "string",
    "latitude": 0,
    "longitude": 0,
    "doorInfo": "string"
  },
  "photoURL": "string",
  "phone2": "string",
  "businessHours": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|id|string(uuid)|true|none|none|
|firstName|string|false|none|none|
|lastName|string|false|none|none|
|fullName|string|false|none|none|
|shortName|string|false|none|none|
|email|string|true|none|none|
|phone|string|false|none|none|
|address|[Address](#schemaaddress)|false|none|none|
|photoURL|string|false|none|none|
|phone2|string|false|none|none|
|businessHours|string|false|none|none|

<h2 id="tocSloginresponse">LoginResponse</h2>

<a id="schemaloginresponse"></a>

```json
{
  "token": "string",
  "userId": "string",
  "errors": [
    "string"
  ]
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|token|string|false|none|none|
|userId|string(uuid)|false|none|none|
|errors|[string]|true|none|none|

<h2 id="tocScredentials">Credentials</h2>

<a id="schemacredentials"></a>

```json
{
  "identifier": "string",
  "password": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|identifier|string|true|none|none|
|password|string|true|none|none|

<h2 id="tocSpropertysummary">PropertySummary</h2>

<a id="schemapropertysummary"></a>

```json
{
  "id": "string",
  "displayAddress": "string",
  "pictureUrl": "string",
  "ownerPictureUrl": "string",
  "latitude": 0,
  "longitude": 0,
  "externalRef": "string",
  "doorNumber": "string",
  "rentSell": "property.basics.rentsell.rent"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|id|string(uuid)|false|none|none|
|displayAddress|string|true|none|none|
|pictureUrl|string|false|none|none|
|ownerPictureUrl|string|false|none|none|
|latitude|number(double)|true|none|none|
|longitude|number(double)|true|none|none|
|externalRef|string|false|none|none|
|doorNumber|string|false|none|none|
|rentSell|string|false|none|Property rent or sell|

#### Enumerated Values

|Property|Value|
|---|---|
|rentSell|property.basics.rentsell.rent|
|rentSell|property.basics.rentsell.sell|

<h2 id="tocSpropertyvisit">PropertyVisit</h2>

<a id="schemapropertyvisit"></a>

```json
{
  "propertyId": "string",
  "visitId": "string",
  "readAt": "2018-07-09T12:27:04Z",
  "note": "string",
  "comment": "string",
  "positivePoints": "string",
  "negativePoints": "string",
  "questions": "string",
  "visitorInterest": 0
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|propertyId|string(uuid)|true|none|none|
|visitId|string(uuid)|true|none|none|
|readAt|string(date-time)|false|none|none|
|note|string|false|none|none|
|comment|string|false|none|none|
|positivePoints|string|false|none|none|
|negativePoints|string|false|none|none|
|questions|string|false|none|none|
|visitorInterest|integer(int32)|false|none|visitorInterest|

<h2 id="tocSvisit">Visit</h2>

<a id="schemavisit"></a>

```json
{
  "id": "string",
  "date": "2018-07-09T12:27:04Z",
  "createdAt": "2018-07-09T12:27:04Z",
  "flatguideId": "string",
  "code": "string",
  "propertyVisits": [
    {
      "propertyId": "string",
      "visitId": "string",
      "readAt": "2018-07-09T12:27:04Z",
      "note": "string",
      "comment": "string",
      "positivePoints": "string",
      "negativePoints": "string",
      "questions": "string",
      "visitorInterest": 0
    }
  ],
  "visitorVisits": [
    {
      "visitId": "string",
      "askedPropertyId": "string",
      "status": "visit.status.proposed",
      "initialDate": "2018-07-09T12:27:04Z",
      "rating": 0,
      "comment": "string",
      "visitor": {
        "email": "string",
        "firstName": "string",
        "lastName": "string",
        "phone": "string",
        "fields": {}
      },
      "fileUrl": "string",
      "fileHandles": [
        "string"
      ],
      "statusUpdatedAt": "2018-07-09T12:27:04Z"
    }
  ],
  "propertySummary": {
    "id": "string",
    "displayAddress": "string",
    "pictureUrl": "string",
    "ownerPictureUrl": "string",
    "latitude": 0,
    "longitude": 0,
    "externalRef": "string",
    "doorNumber": "string",
    "rentSell": "property.basics.rentsell.rent"
  },
  "durationMinutes": 0
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|id|string(uuid)|true|none|none|
|date|string(date-time)|false|none|none|
|createdAt|string(date-time)|false|none|none|
|flatguideId|string(uuid)|false|none|none|
|code|string|false|none|none|
|propertyVisits|[[PropertyVisit](#schemapropertyvisit)]|true|none|none|
|visitorVisits|[[VisitorVisit](#schemavisitorvisit)]|true|none|none|
|propertySummary|[PropertySummary](#schemapropertysummary)|true|none|none|
|durationMinutes|integer(int32)|true|none|none|

<h2 id="tocSvisitorvisit">VisitorVisit</h2>

<a id="schemavisitorvisit"></a>

```json
{
  "visitId": "string",
  "askedPropertyId": "string",
  "status": "visit.status.proposed",
  "initialDate": "2018-07-09T12:27:04Z",
  "rating": 0,
  "comment": "string",
  "visitor": {
    "email": "string",
    "firstName": "string",
    "lastName": "string",
    "phone": "string",
    "fields": {}
  },
  "fileUrl": "string",
  "fileHandles": [
    "string"
  ],
  "statusUpdatedAt": "2018-07-09T12:27:04Z"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|visitId|string(uuid)|true|none|none|
|askedPropertyId|string(uuid)|true|none|none|
|status|string|false|none|Visit status|
|initialDate|string(date-time)|false|none|none|
|rating|integer(int32)|false|none|rating|
|comment|string|false|none|none|
|visitor|[Visitor](#schemavisitor)|true|none|none|
|fileUrl|string|false|none|none|
|fileHandles|[string]|false|none|none|
|statusUpdatedAt|string(date-time)|false|none|none|

#### Enumerated Values

|Property|Value|
|---|---|
|status|visit.status.proposed|
|status|visit.status.confirmed|
|status|visit.status.cancelled.visitor|
|status|visit.status.cancelled.owner|
|status|visit.status.cancelled.flatguide|
|status|visit.status.cancelled.rescheduled|
|status|visit.status.cancelled.terminated|
|status|visit.status.done|

<h2 id="tocSvisitorcancelrequest">VisitorCancelRequest</h2>

<a id="schemavisitorcancelrequest"></a>

```json
{
  "visitStatus": "visit.status.proposed",
  "visitorId": "string",
  "visitId": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|visitStatus|string|false|none|Visit status|
|visitorId|string|false|none|none|
|visitId|string(uuid)|true|none|none|

#### Enumerated Values

|Property|Value|
|---|---|
|visitStatus|visit.status.proposed|
|visitStatus|visit.status.confirmed|
|visitStatus|visit.status.cancelled.visitor|
|visitStatus|visit.status.cancelled.owner|
|visitStatus|visit.status.cancelled.flatguide|
|visitStatus|visit.status.cancelled.rescheduled|
|visitStatus|visit.status.cancelled.terminated|
|visitStatus|visit.status.done|

<h2 id="tocSstatuschangerequest">StatusChangeRequest</h2>

<a id="schemastatuschangerequest"></a>

```json
{
  "visitStatus": "visit.status.proposed",
  "visitorId": "string",
  "visitId": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|visitStatus|string|false|none|Visit status|
|visitorId|string|false|none|none|
|visitId|string(uuid)|true|none|none|

#### Enumerated Values

|Property|Value|
|---|---|
|visitStatus|visit.status.proposed|
|visitStatus|visit.status.confirmed|
|visitStatus|visit.status.cancelled.visitor|
|visitStatus|visit.status.cancelled.owner|
|visitStatus|visit.status.cancelled.flatguide|
|visitStatus|visit.status.cancelled.rescheduled|
|visitStatus|visit.status.cancelled.terminated|
|visitStatus|visit.status.done|

<h2 id="tocSviewingslot">ViewingSlot</h2>

<a id="schemaviewingslot"></a>

```json
{
  "date": "2018-07-09T12:27:04Z",
  "available": true,
  "isPriority": true
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|date|string(date-time)|false|none|none|
|available|boolean|true|none|none|
|isPriority|boolean|true|none|none|

<h2 id="tocSvisitcreaterequest">VisitCreateRequest</h2>

<a id="schemavisitcreaterequest"></a>

```json
{
  "propertyId": "string",
  "date": "2018-07-09T12:27:04Z",
  "visitor": {
    "email": "string",
    "firstName": "string",
    "lastName": "string",
    "phone": "string",
    "fields": {}
  },
  "visitorTokenId": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|propertyId|string(uuid)|true|none|none|
|date|string(date-time)|false|none|none|
|visitor|[Visitor](#schemavisitor)|true|none|none|
|visitorTokenId|string(uuid)|false|none|none|

<h2 id="tocSvisitslot">VisitSlot</h2>

<a id="schemavisitslot"></a>

```json
{
  "date": "2018-07-09T12:27:04Z",
  "available": true,
  "score": 0
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|date|string(date-time)|false|none|none|
|available|boolean|true|none|none|
|score|number|true|none|none|
